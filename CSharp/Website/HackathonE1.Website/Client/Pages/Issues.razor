@page "/issues"

@using System.ComponentModel.DataAnnotations;

@inject IHttpClientFactory httpFactory
@inject NavigationManager navMan


<AuthorizeView>
    <NotAuthorized>
        <NavigateToLogin ContinueWith="/issues" />
    </NotAuthorized>

    <Authorized Context="authContext">
        <div class="form-bg row">
            <div class="col-6">

                <EditForm Model="model" class="container-md" OnValidSubmit="HandleSubmit">
                    <div class="row mb-3">
                        <label>
                            Latitude: <ValidationMessage For="@(() => model.Latitude)" />
                            <InputNumber @bind-Value="model.Latitude" />
                        </label>
                    </div>
                    <div class="row mb-3">
                        <label>
                            Longitude: <ValidationMessage For="@(() => model.Longitude)" />
                            <InputNumber @bind-Value="model.Longitude" />
                        </label>
                    </div>
                    <div class="row mb-3">
                        <label>
                            Radius: <ValidationMessage For="@(() => model.TypeId)" />
                            <InputSelect @bind-Value="model.TypeId">
                                @if ( types is null )
                                {
                                    <option value="-1">Loading...</option>
                                }
                                else
                                {
                                    @foreach ( var type in types )
                                    {
                                        <option value="@type.Id">@type.Name</option>
                                    }
                                }
                            </InputSelect>
                        </label>
                    </div>
                    <div class="row mb-3">
                        <button type="submit" class="submit">Send issue</button>
                    </div>
                </EditForm>

                @if ( !string.IsNullOrEmpty( status ) )
                {
                    <div class="alert alert-danger">
                        @status
                    </div>
                }

            </div>
            @if ( issues is not null )
            {
                <div class="col-6">
                    <table>
                        <thead>
                            <tr>
                                <td>Id</td>
                                <td>Latitude</td>
                                <td>Longitude</td>
                                <td>Type</td>
                                <td>Mark as solved</td>
                            </tr>
                        </thead>
                        <tbody>
                            <Virtualize Items="issues" Context="issue">
                                <tr>
                                    <td>@issue.Id</td>
                                    <td>@issue.Latitude</td>
                                    <td>@issue.Longitude</td>
                                    <td>
                                        @if ( types is not null )
                                        {
                                            @ReadType( issue.TypeId ).Name
                                        }
                                    </td>
                                    <td><button @onclick="()=>DeleteIssue(issue.Id)">X</button></td>
                                </tr>
                            </Virtualize>
                        </tbody>
                    </table>
                </div>
            }

        </div>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if ( ( await authenticationStateTask )?.User?.Identity?.IsAuthenticated is not true )
        {
            return;
        }

        await Task.WhenAll(
            GetIssue(),
            GetTypes() );
    }


    class CreateIssueDto
    {
        [Required]
        [Range( -90, 90 )]
        public double Latitude { get; set; }
        [Required]
        [Range( -180, 180 )]
        public double Longitude { get; set; }

        [Required]
        [Range( 1, int.MaxValue, ErrorMessage = "type is required" )]
        public int TypeId { get; set; }
    }

    class GetIssueDto
    {
        [Key]
        public int Id { get; set; }
        [Required]
        [Range( -90, 90 )]
        public double Latitude { get; set; }
        [Required]
        [Range( -180, 180 )]
        public double Longitude { get; set; }

        [Required]
        public int TypeId { get; set; }
    }

    class GetIssueTypeDto
    {
        [Key]
        public int Id { get; set; }
        [Required]
        [MaxLength( 24 )]
        public string Name { get; set; }
        [MaxLength( 256 )]
        public string Description { get; set; }
    }

    private readonly CreateIssueDto model = new();
    private string status = null;

    private async Task HandleSubmit()
    {
        await CreateIssue();
    }

    public HttpClient HttpClient => httpFactory.CreateClient( "api" );

    private List<GetIssueDto> issues;
    private List<GetIssueTypeDto> types;
    private GetIssueTypeDto ReadType( int id )
    {
        return types.Where( x => x.Id == id ).FirstOrDefault();
    }

    private async Task GetTypes()
    {
        types = await HttpClient.GetFromJsonAsync<List<GetIssueTypeDto>>( "api/issuetypes", BrowserRequestCredentials.Include );
    }

    private async Task GetIssue()
    {
        issues = await HttpClient.GetFromJsonAsync<List<GetIssueDto>>( "api/issues/owned", BrowserRequestCredentials.Include );
    }

    private async Task DeleteIssue( int id )
    {
        var resp = await HttpClient.DeleteAsync( $"api/issues/{id}", BrowserRequestCredentials.Include );

        if ( resp.IsSuccessStatusCode )
        {
            issues.RemoveAll( x => x.Id == id );
            return;
        }

        if ( resp.StatusCode is System.Net.HttpStatusCode.NotFound )
        {
            issues.RemoveAll( x => x.Id == id );
            return;
        }

        await InformError();
    }

    private async Task CreateIssue()
    {
        var resp = await HttpClient.PostAsJsonAsync( "api/issues", model, BrowserRequestCredentials.Include );
        if ( resp.IsSuccessStatusCode )
        {
            var item = await resp.Content.ReadFromJsonAsync<GetIssueDto>();
            issues.Add( item );
            return;
        }

        await InformError();
    }

    private async Task InformError()
    {
        status = "something went wrong";
        StateHasChanged();
        await Task.Delay( 3000 );
        status = null;
        StateHasChanged();
    }

}
