@page "/login"
@layout AuthLayout

@using System.ComponentModel.DataAnnotations
@using System.Text.Json.Serialization
@using Microsoft.AspNetCore.WebUtilities
@using System.Web

@inject IHttpClientFactory httpFactory
@inject AuthenticationStateProvider auth
@inject NavigationManager navMan

<EditForm Model="model" class="auth-form" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <div class="auth-form-box">
        <label>
            Email address: <ValidationMessage For="@(() => model.Email)" />
            <InputText @bind-Value="model.Email" />
        </label>
    </div>
    <div class="auth-form-box">
        <label>
            Password: <ValidationMessage For="@(() => model.Password)" />
            <InputText type="password" @bind-Value="model.Password" />
        </label>
    </div>
    <div class="auth-form-box">
        <button type="submit" class="submit">Log in</button>
    </div>
</EditForm>


@code {
    class LoginModel
    {
        [JsonPropertyName( "username" )]
        [Required( AllowEmptyStrings = false, ErrorMessage = "email is required" )]
        [EmailAddress( ErrorMessage = "this is not a valid email address" )]
        public string Email { get; set; }

        [Required( AllowEmptyStrings = false, ErrorMessage = "password is required" )]
        [MinLength( 8, ErrorMessage = "password must be at least 8 characters long" )]
        public string Password { get; set; }
    }

    private readonly LoginModel model = new();

    private async Task HandleSubmit()
    {
        var http = httpFactory.CreateClient( "api" );
        var resp = await http.PostAsJsonAsync( "auth/token", model );

        if ( !resp.IsSuccessStatusCode )
        {
            return;
        }

        var token = await resp.Content.ReadAsStringAsync();

        var jwtAuth = auth as JwtAuthenticationStateProvider;
        jwtAuth.Token = token;

        string cont = null;

        var uri = new Uri( navMan.Uri );
        var queryStrings = QueryHelpers.ParseQuery( uri.Query );
        if ( queryStrings.TryGetValue( "continue", out var c ) )
        {
            cont = HttpUtility.UrlDecode( c );
        }

        navMan.NavigateTo( cont ?? "/" );
    }
}
