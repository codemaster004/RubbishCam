@page "/observed"

@using System.ComponentModel.DataAnnotations;

@inject IHttpClientFactory httpFactory
@inject NavigationManager navMan


<AuthorizeView>
    <NotAuthorized>
        <NavigateToLogin ContinueWith="/observed" />
    </NotAuthorized>

    <Authorized Context="authContext">
        <div class="form-bg">
            <div class="col-6">

                <EditForm Model="model" class="container-md" OnValidSubmit="HandleSubmit">
                    <div class="row mb-3">
                        <label>
                            Latitude: <ValidationMessage For="@(() => model.Latitude)" />
                            <InputNumber @bind-Value="model.Latitude" />
                        </label>
                    </div>
                    <div class="row mb-3">
                        <label>
                            Longitude: <ValidationMessage For="@(() => model.Longitude)" />
                            <InputNumber @bind-Value="model.Longitude" />
                        </label>
                    </div>
                    <div class="row mb-3">
                        <label>
                            Radius: <ValidationMessage For="@(() => model.Radius)" />
                            <InputNumber @bind-Value="model.Radius" />
                        </label>
                    </div>
                    <div class="row mb-3">
                        <button type="submit" class="submit">Observe</button>
                    </div>
                </EditForm>

                @status

            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    class ObservedModel
    {
        [Required]
        [Range( -90, 90 )]
        public double Latitude { get; set; }
        [Required]
        [Range( -180, 180 )]
        public double Longitude { get; set; }
        [Required]
        public double Radius { get; set; }
    }

    private readonly ObservedModel model = new();
    private string status = "";

    private async Task HandleSubmit()
    {
        var http = httpFactory.CreateClient( "api" );
        var resp = await http.PostAsJsonAsync( "api/ObservedAreas/owned", model );
        if ( resp.IsSuccessStatusCode )
        {
            status = "success";
            return;
        }

        status = "somthing went wrong";
    }

}
